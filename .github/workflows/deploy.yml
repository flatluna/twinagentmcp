name: Deploy MCP Server to Azure Container Apps

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering

env:
  AZURE_CONTAINERAPP_NAME: twinagentservices
  AZURE_GROUP_NAME: Agents
  AZURE_CONTAINER_ENVIRONMENT: twinagentenv
  AZURE_LOCATION: eastus
  REGISTRY_NAME: twinagentregistry

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üîê Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: üè≠ Setup Azure Container Registry
      run: |
        # Create ACR with admin enabled
        az acr create \
          --resource-group ${{ env.AZURE_GROUP_NAME }} \
          --name ${{ env.REGISTRY_NAME }} \
          --sku Basic \
          --location ${{ env.AZURE_LOCATION }} \
          --admin-enabled true || echo "Registry might already exist"
        
        # Enable admin user
        az acr update --name ${{ env.REGISTRY_NAME }} --admin-enabled true

    - name: üîë Login to Azure Container Registry
      run: |
        az acr login --name ${{ env.REGISTRY_NAME }}

    - name: üê≥ Build and push Docker image
      run: |
        # Build image
        docker build -t ${{ env.REGISTRY_NAME }}.azurecr.io/twinagentservices:latest .
        
        # Push image
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/twinagentservices:latest

    - name: üåê Create Container App Environment
      run: |
        az containerapp env create \
          --name ${{ env.AZURE_CONTAINER_ENVIRONMENT }} \
          --resource-group ${{ env.AZURE_GROUP_NAME }} \
          --location ${{ env.AZURE_LOCATION }} || echo "Environment might already exist"

    - name: üöÄ Deploy Container App
      run: |
        # Get ACR admin credentials
        ACR_USERNAME=$(az acr credential show --name ${{ env.REGISTRY_NAME }} --query username --output tsv)
        ACR_PASSWORD=$(az acr credential show --name ${{ env.REGISTRY_NAME }} --query passwords[0].value --output tsv)
        
        # Create/Update Container App
        az containerapp create \
          --name ${{ env.AZURE_CONTAINERAPP_NAME }} \
          --resource-group ${{ env.AZURE_GROUP_NAME }} \
          --environment ${{ env.AZURE_CONTAINER_ENVIRONMENT }} \
          --image ${{ env.REGISTRY_NAME }}.azurecr.io/twinagentservices:latest \
          --target-port 8000 \
          --ingress external \
          --registry-server ${{ env.REGISTRY_NAME }}.azurecr.io \
          --registry-username $ACR_USERNAME \
          --registry-password $ACR_PASSWORD \
          --env-vars API_KEYS="${{ secrets.MCP_API_KEY }}" \
          --cpu 0.25 \
          --memory 0.5Gi \
          --min-replicas 1 \
          --max-replicas 1 || \
        az containerapp update \
          --name ${{ env.AZURE_CONTAINERAPP_NAME }} \
          --resource-group ${{ env.AZURE_GROUP_NAME }} \
          --image ${{ env.REGISTRY_NAME }}.azurecr.io/twinagentservices:latest \
          --env-vars API_KEYS="${{ secrets.MCP_API_KEY }}"

    - name: üß™ Test deployment
      run: |
        echo "üöÄ Deployment completed!"
        echo "üìù Your MCP server should be available at:"
        echo "   https://${{ env.AZURE_CONTAINERAPP_NAME }}.${{ env.AZURE_LOCATION }}.azurecontainerapps.io/health"
        echo ""
        echo "üîë Use this API key in your client:"
        echo "   API_KEY: ${{ secrets.MCP_API_KEY }}"
        echo ""
        echo "üìã Add to your client .env file:"
        echo "   MCP_API_KEYS=\"${{ secrets.MCP_API_KEY }}\""
        echo "   MCP_URL=\"https://${{ env.AZURE_CONTAINERAPP_NAME }}.${{ env.AZURE_LOCATION }}.azurecontainerapps.io/sse\""
